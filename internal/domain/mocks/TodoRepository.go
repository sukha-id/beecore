// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	todo "github.com/sukha-id/bee/internal/domain/todo"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: ctx, code
func (_m *TodoRepository) FindOne(ctx context.Context, code string) (*todo.Task, error) {
	ret := _m.Called(ctx, code)

	var r0 *todo.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*todo.Task, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *todo.Task); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreOne provides a mock function with given fields: ctx, _a1
func (_m *TodoRepository) StoreOne(ctx context.Context, _a1 todo.Task) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, todo.Task) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, todo.Task) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, todo.Task) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, _a1, uuid
func (_m *TodoRepository) UpdateOne(ctx context.Context, _a1 todo.Task, uuid string) error {
	ret := _m.Called(ctx, _a1, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, todo.Task, string) error); ok {
		r0 = rf(ctx, _a1, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
