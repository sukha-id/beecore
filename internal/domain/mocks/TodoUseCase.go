// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/sukha-id/bee/internal/domain/todo"
)

// TodoUseCase is an autogenerated mock type for the TodoUseCase type
type TodoUseCase struct {
	mock.Mock
}

// StoreOne provides a mock function with given fields: ctx, todo
func (_m *TodoUseCase) StoreOne(ctx context.Context, todo domain.Todo) (domain.Todo, error) {
	ret := _m.Called(ctx, todo)

	var r0 domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Todo) (domain.Todo, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Todo) domain.Todo); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Get(0).(domain.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoUseCase creates a new instance of TodoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoUseCase {
	mock := &TodoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
